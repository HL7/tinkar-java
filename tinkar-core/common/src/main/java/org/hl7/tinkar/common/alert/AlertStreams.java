package org.hl7.tinkar.common.alert;

import org.hl7.tinkar.common.flow.NoopFlowSubscriber;
import org.hl7.tinkar.common.id.PublicIdStringKey;
import org.hl7.tinkar.common.id.PublicIds;
import org.hl7.tinkar.common.util.broadcast.Broadcaster;
import org.hl7.tinkar.common.util.broadcast.SimpleBroadcaster;

import java.util.concurrent.ConcurrentHashMap;
/*
 * Alert streams are generated by tasks?
 * <p>
 * Alert streams are intercepted first at the node level, then at the window level, in a dedicated alert node, then at an application level.
 * <p>
 * Alerts have a scope: node, window, application
 * <p>
 * Alerts have resolvers/fixers? Could simply be dismissers.
 * <p>
 * Alerts have an importance: information, confirmation, warning, error
 * <p>
 * Each node has a filter that either consumes alerts, or sends them on.
 * <p>
 * Each node has a set of resolvers that can be automatically or manually applied.

 */
public class AlertStreams {
    public static final PublicIdStringKey<Broadcaster<AlertObject>> ROOT_ALERT_STREAM_KEY =
            new PublicIdStringKey(PublicIds.of("d2733c61-fef3-4051-bc96-137819a18d0a"), "root alert stream");
    private static ConcurrentHashMap<PublicIdStringKey<Broadcaster<AlertObject>>, Broadcaster<AlertObject>> alertStreamMap = new ConcurrentHashMap<>();

    public static void dispatchToRoot(Throwable e) {
        getRoot().dispatch(AlertObject.makeError(e));
    }

    public static Broadcaster<AlertObject> getRoot() {
        return get(ROOT_ALERT_STREAM_KEY);
    }

    public static Broadcaster<AlertObject> get(PublicIdStringKey<Broadcaster<AlertObject>> alertStreamKey) {
        return AlertStreams.alertStreamMap.computeIfAbsent(alertStreamKey, alertStreamPublicIdStringKey -> new SimpleBroadcaster<>());
    }
}
