/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * You may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributions from 2013-2017 where performed either by US government 
 * employees, or under US Veterans Health Administration contracts. 
 *
 * US Veterans Health Administration contributions by government employees
 * are work of the U.S. Government and are not subject to copyright
 * protection in the United States. Portions contributed by government 
 * employees are USGovWork (17USC ยง105). Not subject to copyright. 
 * 
 * Contribution by contractors to the US Veterans Health Administration
 * during this period are contractually contributed under the
 * Apache License, Version 2.0.
 *
 * See: https://www.usa.gov/government-works
 * 
 * Contributions prior to 2013:
 *
 * Copyright (C) International Health Terminology Standards Development Organisation.
 * Licensed under the Apache License, Version 2.0.
 *
 */



package org.hl7.tinkar.coordinate.logic;

import org.hl7.tinkar.common.service.PrimitiveData;
import org.hl7.tinkar.entity.PatternEntity;
import org.hl7.tinkar.entity.calculator.Latest;
import org.hl7.tinkar.coordinate.stamp.StampFilter;
import org.hl7.tinkar.entity.Entity;
import org.hl7.tinkar.component.Concept;
import org.hl7.tinkar.entity.graph.DiTreeEntity;
import org.hl7.tinkar.terms.ConceptFacade;
import org.hl7.tinkar.terms.TinkarTerm;

import java.util.ArrayList;
import java.util.Optional;
import java.util.UUID;

/**
 * ImmutableCoordinate to manage the retrieval and display of logic information.
 *
 * Created by kec on 2/16/15.
 */
public interface LogicCoordinate {
    /**
     * 
     * @return a content based uuid, such that identical logic coordinates
     * will have identical uuids, and that different logic coordinates will 
     * always have different uuids.
     */
    default UUID getLogicCoordinateUuid() {
       ArrayList<UUID> uuidList = new ArrayList();
       Entity.provider().addSortedUuids(uuidList, getClassifierNid());
       Entity.provider().addSortedUuids(uuidList, getDescriptionLogicProfileNid());
       Entity.provider().addSortedUuids(uuidList, getStatedAxiomsPatternNid());
       Entity.provider().addSortedUuids(uuidList, getInferredAxiomsPatternNid());
       Entity.provider().addSortedUuids(uuidList, getConceptMemberPatternNid());
       Entity.provider().addSortedUuids(uuidList, getStatedNavigationPatternNid());
       Entity.provider().addSortedUuids(uuidList, getInferredNavigationPatternNid());
       Entity.provider().addSortedUuids(uuidList, getRootNid());
       return UUID.nameUUIDFromBytes(uuidList.toString().getBytes());
   }
   /**
    * Gets the classifier nid.
    *
    * @return concept nid for the classifier for this coordinate.
    */
   int getClassifierNid();

   default Concept getClassifier() {
      return Entity.getFast(getClassifierNid());
   }

   /**
    * Gets the description logic profile nid.
    *
    * @return concept nid for the description-logic profile for this coordinate.
    */
   int getDescriptionLogicProfileNid();

   default Concept getDescriptionLogicProfile() {
      return Entity.getFast(getDescriptionLogicProfileNid());
   }
   /**
    * Gets the inferred assemblage nid.
    *
    * @return concept nid for the assemblage where the inferred logical form
    * of concept definition graphs are stored.
    */
   int getInferredAxiomsPatternNid();

   default Concept getInferredAssemblage() {
      return Entity.getFast(getInferredAxiomsPatternNid());
   }
   /**
    * Gets the stated assemblage nid.
    *
    * @return concept nid for the assemblage where the stated logical form
    * of concept definition graphs are stored.
    */
   int getStatedAxiomsPatternNid();

   default Concept getStatedAssemblage() {
      return Entity.getFast(getStatedAxiomsPatternNid());
   }

   /**
    * 
    * @return the nid for the assemblage within which the concepts to be classified are defined within. 
    */
   int getConceptMemberPatternNid();
   default PatternEntity getConceptMemberPattern() {
      return Entity.getFast(getConceptMemberPatternNid());
   }


   /**
    *
    * @return the nid of the concept identifying the digraph generated by stated axioms according to this logic coordinate.
    */
   default int getStatedNavigationPatternNid() {
      return TinkarTerm.STATED_NAVIGATION.nid();
   }

   /**
    *
    * @return the concept identifying the digraph generated by classifying according to this logic coordinate.
    */
   default int getInferredNavigationPatternNid() {
      return TinkarTerm.INFERRED_NAVIGATION.nid();
   }

   default Latest<DiTreeEntity> getAxiomsVersion(int conceptNid, PremiseType premiseType, StampFilter stampFilter) {
      throw new UnsupportedOperationException();
//      int assemblageSequence;
//
//      if (premiseType == PremiseType.INFERRED) {
//         assemblageSequence = getInferredAssemblageNid();
//      } else {
//         assemblageSequence = getStatedAssemblageNid();
//      }
//      ImmutableList<LatestVersion<DiTreeEntity>> latestVersionList = Get.assemblageService()
//              .getSnapshot(LogicGraphVersion.class, stampFilter)
//              .getLatestSemanticVersionsForComponentFromAssemblage(conceptNid, assemblageSequence);
//      if (latestVersionList.isEmpty()) {
//         return Optional.empty();
//      }
//      LatestVersion<DiTreeEntity> logicalDef = Get.assemblageService()
//              .getSnapshot(LogicGraphVersion.class, stampFilter)
//              .getLatestSemanticVersionsForComponentFromAssemblage(conceptNid, assemblageSequence).get(0);
//
//      if (logicalDef.isPresent()) {
//         return Optional.of(logicalDef.get().getLogicalExpression());
//      }
//      return Optional.empty();
   }

   default Latest<DiTreeEntity> getStatedAxiomsVersion(int conceptNid, StampFilter stampFilter) {
      return getAxiomsVersion(conceptNid, PremiseType.STATED, stampFilter);
   }

   default Latest<DiTreeEntity> getInferredAxiomsVersion(ConceptFacade Concept, StampFilter stampFilter) {
      return getAxiomsVersion(Concept.nid(), PremiseType.INFERRED, stampFilter);
   }

   default Latest<DiTreeEntity> getStatedAxiomsVersion(ConceptFacade Concept, StampFilter stampFilter) {
      return getAxiomsVersion(Concept.nid(), PremiseType.STATED, stampFilter);
   }

   default Latest<DiTreeEntity> getInferredAxiomsVersion(int conceptNid, StampFilter stampFilter) {
      return getAxiomsVersion(conceptNid, PremiseType.INFERRED, stampFilter);
   }

   default String toUserString() {
      StringBuilder sb = new StringBuilder("   stated axiom pattern: ");
      sb.append(PrimitiveData.text(this.getStatedAxiomsPatternNid()));
      sb.append("\n   inferred axiom pattern: ");
      sb.append(PrimitiveData.text(this.getInferredAxiomsPatternNid()));
      sb.append("\n   profile: ");
      sb.append(PrimitiveData.text(this.getDescriptionLogicProfileNid()));
      sb.append("\n   classifier: ");
      sb.append(PrimitiveData.text(this.getClassifierNid()));
      sb.append("\n   stated navigation pattern: ");
      sb.append(PrimitiveData.text(this.getStatedNavigationPatternNid()));
      sb.append("\n   inferred navigation pattern: ");
      sb.append(PrimitiveData.text(this.getInferredNavigationPatternNid()));
      sb.append("\n   concept member pattern: ");
      sb.append(PrimitiveData.text(this.getConceptMemberPatternNid()));
      sb.append("\n   root: ");
      sb.append(PrimitiveData.text(this.getRootNid()));

      return sb.toString();
   }

   default int getRootNid() {
      throw new UnsupportedOperationException();
//      return TinkarTerm.SOLOR_ROOT.nid();
   }

   default Concept getRoot() {
      throw new UnsupportedOperationException();
//      return TinkarTerm.SOLOR_ROOT;
   }
   LogicCoordinateImmutable toLogicCoordinateImmutable();
}

